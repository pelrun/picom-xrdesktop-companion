<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Graphene" version="1.0"/>
  <include name="Gulkan" version="0.15"/>
  <include name="Gxr" version="0.15"/>
  <include name="cairo" version="1.0"/>
  <package name="xrdesktop-0.15"/>
  <c:include name="xrd.h"/>
  <namespace name="Xrd"
             version="0.15"
             shared-library="libxrdesktop-0.15.so.0"
             c:identifier-prefixes="Xrd"
             c:symbol-prefixes="xrd">
    <record name="ClickEvent" c:type="XrdClickEvent">
      <doc xml:space="preserve"
           filename="../src/xrd-input-synth.h"
           line="37">A 2D mouse click event.</doc>
      <source-position filename="../src/xrd-input-synth.h" line="53"/>
      <field name="window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="39">The #XrdWindow that was clicked.</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </field>
      <field name="position" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="40">A #graphene_point_t 2D screen position for the click.</doc>
        <type name="Graphene.Point" c:type="graphene_point_t*"/>
      </field>
      <field name="button" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="41">The #XrdInputSynthButton identifier of the mouse button.</doc>
        <type name="InputSynthButton" c:type="XrdInputSynthButton"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="42">A #gboolean that is %TRUE when pressed and %FALSE when released.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="controller" writable="1">
        <type name="Gxr.Controller" c:type="GxrController*"/>
      </field>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="XrdClient"
           parent="GObject.Object"
           glib:type-name="XrdClient"
           glib:get-type="xrd_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="../src/xrd-client.h" line="102"/>
      <constructor name="new" c:identifier="xrd_client_new">
        <source-position filename="../src/xrd-client.h" line="105"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="XrdClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_mode"
                   c:identifier="xrd_client_new_with_mode">
        <source-position filename="../src/xrd-client.h" line="108"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="XrdClient*"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <type name="ClientMode" c:type="XrdClientMode"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="add_button" introspectable="0">
        <source-position filename="../src/xrd-client.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow**"/>
          </parameter>
          <parameter name="label_count" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
          <parameter name="press_callback"
                     transfer-ownership="none"
                     closure="5">
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="press_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_gulkan" invoker="get_gulkan">
        <source-position filename="../src/xrd-client.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="540">The #GulkanClient.</doc>
          <type name="Gulkan.Client" c:type="GulkanClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="538">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="init_controller">
        <source-position filename="../src/xrd-client.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="window_new_from_data" introspectable="0">
        <source-position filename="../src/xrd-client.h" line="85"/>
        <return-value>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="WindowData" c:type="XrdWindowData*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="window_new_from_meters" introspectable="0">
        <source-position filename="../src/xrd-client.h" line="78"/>
        <return-value>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="window_new_from_native" introspectable="0">
        <source-position filename="../src/xrd-client.h" line="96"/>
        <return-value>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="native"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="width_pixels" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="height_pixels" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="window_new_from_pixels" introspectable="0">
        <source-position filename="../src/xrd-client.h" line="89"/>
        <return-value>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_button" c:identifier="xrd_client_add_button">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="436">Buttons are special windows that can not be grabbed and dragged around.
Instead a button's press_callback is called on the grab action.</doc>
        <source-position filename="../src/xrd-client.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="438">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="439">The button (#XrdWindow) to add.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="440">World space position of the button.</doc>
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
          <parameter name="press_callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="441">A function that will be called when the button is grabbed.</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
          <parameter name="press_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="442">User pointer passed to @press_callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_container" c:identifier="xrd_client_add_container">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="253">For a container to start behaving according to its layout and attachment,
it must be added to the client.

Note: windows in the container must be added to the client separately with
xrd_client_add_window(), preferably with draggable set to FALSE.</doc>
        <source-position filename="../src/xrd-client.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="255">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="container" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="256">The #XrdContainer to add</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_window" c:identifier="xrd_client_add_window">
        <source-position filename="../src/xrd-client.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="282">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="283">The #XrdWindow to add</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="draggable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="284">Desktop windows should set this to TRUE. This will enable the
expected interaction of being able to grab windows and drag them around.
It should be set to FALSE for example for
 - child windows
 - windows in a container that is attached to the FOV, a controller, etc.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="lookup_key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="289">If looking up the #XrdWindow by a key with
xrd_client_lookup_window() should be enabled, set to != NULL.
Note that an #XrdWindow can be replaced by the overlay-scene switch.
Therefore the #XrdWindow should always be looked up instead of cached.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="button_new_from_icon"
              c:identifier="xrd_client_button_new_from_icon">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="400">Creates a button and submits a Cairo rendered image to it.</doc>
        <source-position filename="../src/xrd-client.h" line="141"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="410">a new #XrdWindow representing the button</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="402">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="403">Width in meters.</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="404">Height in meters.</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="405">Density in pixels per meter</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="406">The url of the icon</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="button_new_from_text"
              c:identifier="xrd_client_button_new_from_text">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="351">Creates a button and submits a Cairo rendered text label to it.</doc>
        <source-position filename="../src/xrd-client.h" line="133"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="363">a new #XrdWindow representing the button</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="353">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="354">Width in meters.</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="355">Height in meters.</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="356">Density in pixels per meter</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="label_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="357">The number of text lines given in @label</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="358">One or more lines of text that will be
displayed on the button.</doc>
            <array length="3" zero-terminated="0" c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_controllers" c:identifier="xrd_client_get_controllers">
        <source-position filename="../src/xrd-client.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="2050">A list of #GxrController.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Gxr.Controller"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="2048">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_cursor"
              c:identifier="xrd_client_get_desktop_cursor">
        <source-position filename="../src/xrd-client.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="712">The #XrdDesktopCursor.</doc>
          <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="710">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gulkan" c:identifier="xrd_client_get_gulkan">
        <source-position filename="../src/xrd-client.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="540">The #GulkanClient.</doc>
          <type name="Gulkan.Client" c:type="GulkanClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="538">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gxr_context" c:identifier="xrd_client_get_gxr_context">
        <source-position filename="../src/xrd-client.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="2433">The #GxrContext</doc>
          <type name="Gxr.Context" c:type="GxrContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="2431">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_input_synth" c:identifier="xrd_client_get_input_synth">
        <source-position filename="../src/xrd-client.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="844">A #XrdInputSynth.</doc>
          <type name="InputSynth" c:type="XrdInputSynth*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="842">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keyboard_window"
              c:identifier="xrd_client_get_keyboard_window">
        <source-position filename="../src/xrd-client.h" line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="526">The window that is currently used for
keyboard input. Can be %NULL.</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="524">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager" c:identifier="xrd_client_get_manager">
        <source-position filename="../src/xrd-client.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="797">A #XrdWindowManager.</doc>
          <type name="WindowManager" c:type="XrdWindowManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="795">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_synth_hovered"
              c:identifier="xrd_client_get_synth_hovered">
        <source-position filename="../src/xrd-client.h" line="161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="681">If the controller used for synthesizing
input is hovering over an #XrdWindow, return this window, else %NULL.</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="679">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_upload_layout"
              c:identifier="xrd_client_get_upload_layout">
        <source-position filename="../src/xrd-client.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="244">an #VkImageLayout</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="242">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_windows" c:identifier="xrd_client_get_windows">
        <source-position filename="../src/xrd-client.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="753">A list of #XrdWindow.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="751">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_window" c:identifier="xrd_client_lookup_window">
        <source-position filename="../src/xrd-client.h" line="125"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="335">a #XrdWindow</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="332">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="333">The key</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="poll_input_events"
              c:identifier="xrd_client_poll_input_events">
        <source-position filename="../src/xrd-client.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="poll_runtime_events"
              c:identifier="xrd_client_poll_runtime_events">
        <source-position filename="../src/xrd-client.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_container"
              c:identifier="xrd_client_remove_container">
        <source-position filename="../src/xrd-client.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="container" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_window" c:identifier="xrd_client_remove_window">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="815">Removes an #XrdWindow from the management of the #XrdClient and the
#XrdWindowManager.
Note that the #XrdWindow will not be destroyed by this function.</doc>
        <source-position filename="../src/xrd-client.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="817">The #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="818">The #XrdWindow to remove.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin" c:identifier="xrd_client_set_pin">
        <source-position filename="../src/xrd-client.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="win" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="pin" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_pinned_only"
              c:identifier="xrd_client_show_pinned_only">
        <source-position filename="../src/xrd-client.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
          <parameter name="pinned_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_mode" c:identifier="xrd_client_switch_mode">
        <doc xml:space="preserve"
             filename="../src/xrd-client.c"
             line="2354">References to gulkan, gxr and xrdesktop objects (like #XrdWindow)
will be invalid after calling this function.

xrd_client_switch_mode() replaces each #XrdWindow with an appropriate new
one, preserving its transformation matrix, scaling, pinned status, etc.

The caller is responsible for reconnecting callbacks to #XrdClient signals.
The caller is responsible to not use references to any previous #XrdWindow.
Pointers to #XrdWindowData will remain valid, however
#XrdWindowData-&gt;xrd_window will point to a new #XrdWindow.</doc>
        <source-position filename="../src/xrd-client.h" line="197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-client.c"
               line="2369">A new #XrdClient of the opposite
mode than the passed one.</doc>
          <type name="Client" c:type="XrdClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="2356">current #XrdClient to be destroyed.</doc>
            <type name="Client" c:type="XrdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="click-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="keyboard-press-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-quit-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="XrdClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="../src/xrd-client.h" line="102"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../src/xrd-client.h"
             line="45">The object class structure needs to be the first
  element in the widget class structure in order for the class mechanism
  to work correctly. This allows a XrdClientClass pointer to be cast to
  a GObjectClass pointer.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="add_button" introspectable="0">
        <callback name="add_button" introspectable="0">
          <source-position filename="../src/xrd-client.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="button" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow**"/>
            </parameter>
            <parameter name="label_count" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="label" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
            </parameter>
            <parameter name="press_callback"
                       transfer-ownership="none"
                       closure="6">
              <type name="GObject.Callback" c:type="GCallback"/>
            </parameter>
            <parameter name="press_callback_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_gulkan">
        <callback name="get_gulkan">
          <source-position filename="../src/xrd-client.h" line="71"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-client.c"
                 line="540">The #GulkanClient.</doc>
            <type name="Gulkan.Client" c:type="GulkanClient*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-client.c"
                   line="538">The #XrdClient</doc>
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="init_controller">
        <callback name="init_controller">
          <source-position filename="../src/xrd-client.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="controller" transfer-ownership="none">
              <type name="Gxr.Controller" c:type="GxrController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_new_from_meters" introspectable="0">
        <callback name="window_new_from_meters" introspectable="0">
          <source-position filename="../src/xrd-client.h" line="78"/>
          <return-value>
            <type name="Window" c:type="XrdWindow*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
            <parameter name="ppm" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_new_from_data" introspectable="0">
        <callback name="window_new_from_data" introspectable="0">
          <source-position filename="../src/xrd-client.h" line="85"/>
          <return-value>
            <type name="Window" c:type="XrdWindow*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="data" transfer-ownership="none">
              <type name="WindowData" c:type="XrdWindowData*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_new_from_pixels" introspectable="0">
        <callback name="window_new_from_pixels" introspectable="0">
          <source-position filename="../src/xrd-client.h" line="89"/>
          <return-value>
            <type name="Window" c:type="XrdWindow*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="guint32" c:type="uint32_t"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="guint32" c:type="uint32_t"/>
            </parameter>
            <parameter name="ppm" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_new_from_native" introspectable="0">
        <callback name="window_new_from_native" introspectable="0">
          <source-position filename="../src/xrd-client.h" line="96"/>
          <return-value>
            <type name="Window" c:type="XrdWindow*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="XrdClient*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="native"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="width_pixels" transfer-ownership="none">
              <type name="guint32" c:type="uint32_t"/>
            </parameter>
            <parameter name="height_pixels" transfer-ownership="none">
              <type name="guint32" c:type="uint32_t"/>
            </parameter>
            <parameter name="ppm" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ClientMode" c:type="XrdClientMode">
      <source-position filename="../src/xrd-enums.h" line="18"/>
      <member name="overlay" value="0" c:identifier="XRD_CLIENT_MODE_OVERLAY">
      </member>
      <member name="scene" value="1" c:identifier="XRD_CLIENT_MODE_SCENE">
      </member>
    </enumeration>
    <class name="Container"
           c:symbol-prefix="container"
           c:type="XrdContainer"
           parent="GObject.Object"
           glib:type-name="XrdContainer"
           glib:get-type="xrd_container_get_type"
           glib:type-struct="ContainerClass">
      <source-position filename="../src/xrd-container.h" line="23"/>
      <constructor name="new" c:identifier="xrd_container_new">
        <source-position filename="../src/xrd-container.h" line="60"/>
        <return-value transfer-ownership="full">
          <type name="Container" c:type="XrdContainer*"/>
        </return-value>
      </constructor>
      <method name="add_window" c:identifier="xrd_container_add_window">
        <source-position filename="../src/xrd-container.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="63">The container</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="64">The window to add</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="relative_transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="65">the transform of the window's center relative to the
container's center when XRD_CONTAINER_RELATIVE is used, ignored else (may
be NULL then).</doc>
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="center_view" c:identifier="xrd_container_center_view">
        <doc xml:space="preserve"
             filename="../src/xrd-container.c"
             line="597">Places the container in the center of the FOV at the given distance.</doc>
        <source-position filename="../src/xrd-container.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="599">The container.</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="600">A #GxrContext</doc>
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
          <parameter name="distance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="601">The distance from the HMD the container should have.</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_distance" c:identifier="xrd_container_get_distance">
        <source-position filename="../src/xrd-container.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_windows" c:identifier="xrd_container_get_windows">
        <source-position filename="../src/xrd-container.h" line="99"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="../src/xrd-container.c"
               line="115">A list of #XrdWindow
contained in this container. The list must be destroyed by the caller.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="113">The #XrdContainer</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="xrd_container_hide">
        <source-position filename="../src/xrd-container.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_visible" c:identifier="xrd_container_is_visible">
        <source-position filename="../src/xrd-container.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_window" c:identifier="xrd_container_remove_window">
        <source-position filename="../src/xrd-container.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attachment"
              c:identifier="xrd_container_set_attachment">
        <source-position filename="../src/xrd-container.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="530">The container.</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="attachment" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="531">The attachment to set.</doc>
            <type name="ContainerAttachment" c:type="XrdContainerAttachment"/>
          </parameter>
          <parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="532">A controller used for XRD_CONTAINER_ATTACHMENT_HAND. May be
NULL for other attachments.</doc>
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_distance" c:identifier="xrd_container_set_distance">
        <source-position filename="../src/xrd-container.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="distance" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layout" c:identifier="xrd_container_set_layout">
        <source-position filename="../src/xrd-container.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="ContainerLayout" c:type="XrdContainerLayout"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="xrd_container_show">
        <source-position filename="../src/xrd-container.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="step" c:identifier="xrd_container_step">
        <doc xml:space="preserve"
             filename="../src/xrd-container.c"
             line="492">Updates the container's position based on its attachment.</doc>
        <source-position filename="../src/xrd-container.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-container.c"
               line="499">A #gboolean if that is %TRUE the step was successful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="494">The #XrdContainer</doc>
            <type name="Container" c:type="XrdContainer*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-container.c"
                 line="495">A #GxrContext</doc>
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <enumeration name="ContainerAttachment" c:type="XrdContainerAttachment">
      <doc xml:space="preserve"
           filename="../src/xrd-container.h"
           line="25">Enum that defines if the container is moving with user input.</doc>
      <source-position filename="../src/xrd-container.h" line="38"/>
      <member name="none"
              value="0"
              c:identifier="XRD_CONTAINER_ATTACHMENT_NONE">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="27">The #XrdContainer is not attached.</doc>
      </member>
      <member name="head"
              value="1"
              c:identifier="XRD_CONTAINER_ATTACHMENT_HEAD">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="28">The container is tracking the head.</doc>
      </member>
      <member name="hand"
              value="2"
              c:identifier="XRD_CONTAINER_ATTACHMENT_HAND">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="29">The container is tracking a hand.</doc>
      </member>
    </enumeration>
    <record name="ContainerClass"
            c:type="XrdContainerClass"
            glib:is-gtype-struct-for="Container">
      <source-position filename="../src/xrd-container.h" line="23"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ContainerLayout" c:type="XrdContainerLayout">
      <doc xml:space="preserve"
           filename="../src/xrd-container.h"
           line="40">Defines how the children of a #XrdContainer are layed out.</doc>
      <source-position filename="../src/xrd-container.h" line="55"/>
      <member name="no_layout"
              value="0"
              c:identifier="XRD_CONTAINER_NO_LAYOUT">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="42">No layout is set.</doc>
      </member>
      <member name="horizontal"
              value="1"
              c:identifier="XRD_CONTAINER_HORIZONTAL">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="43">A horizontal linear layout.</doc>
      </member>
      <member name="vertical" value="2" c:identifier="XRD_CONTAINER_VERTICAL">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="44">A vertical linear layout.</doc>
      </member>
      <member name="relative" value="3" c:identifier="XRD_CONTAINER_RELATIVE">
        <doc xml:space="preserve"
             filename="../src/xrd-container.h"
             line="45">A relative layout.</doc>
      </member>
    </enumeration>
    <interface name="DesktopCursor"
               c:symbol-prefix="desktop_cursor"
               c:type="XrdDesktopCursor"
               glib:type-name="XrdDesktopCursor"
               glib:get-type="xrd_desktop_cursor_get_type"
               glib:type-struct="DesktopCursorInterface">
      <source-position filename="../src/xrd-desktop-cursor.h" line="79"/>
      <virtual-method name="get_data" invoker="get_data">
        <source-position filename="../src/xrd-desktop-cursor.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-desktop-cursor.c"
               line="110">a #XrdDesktopCursorData</doc>
          <type name="DesktopCursorData" c:type="XrdDesktopCursorData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="108">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_texture" invoker="get_texture">
        <source-position filename="../src/xrd-desktop-cursor.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-desktop-cursor.c"
               line="76">a #GulkanTexture</doc>
          <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="74">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transformation" invoker="get_transformation">
        <source-position filename="../src/xrd-desktop-cursor.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="matrix" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide" invoker="hide">
        <source-position filename="../src/xrd-desktop-cursor.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_and_submit_texture"
                      invoker="set_and_submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-desktop-cursor.c"
             line="38">Sets and submits a texture.</doc>
        <source-position filename="../src/xrd-desktop-cursor.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="40">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="41">A #GulkanTexture that this #XrdDesktopCursor will own.</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_transformation" invoker="set_transformation">
        <source-position filename="../src/xrd-desktop-cursor.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="matrix" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_width_meters" invoker="set_width_meters">
        <source-position filename="../src/xrd-desktop-cursor.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="meters" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show" invoker="show">
        <source-position filename="../src/xrd-desktop-cursor.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="submit_texture" invoker="submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-desktop-cursor.c"
             line="25">Submits current texture.</doc>
        <source-position filename="../src/xrd-desktop-cursor.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="27">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_data" c:identifier="xrd_desktop_cursor_get_data">
        <source-position filename="../src/xrd-desktop-cursor.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-desktop-cursor.c"
               line="110">a #XrdDesktopCursorData</doc>
          <type name="DesktopCursorData" c:type="XrdDesktopCursorData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="108">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_texture" c:identifier="xrd_desktop_cursor_get_texture">
        <source-position filename="../src/xrd-desktop-cursor.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-desktop-cursor.c"
               line="76">a #GulkanTexture</doc>
          <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="74">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transformation"
              c:identifier="xrd_desktop_cursor_get_transformation">
        <source-position filename="../src/xrd-desktop-cursor.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="matrix" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="xrd_desktop_cursor_hide">
        <source-position filename="../src/xrd-desktop-cursor.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init_settings"
              c:identifier="xrd_desktop_cursor_init_settings">
        <source-position filename="../src/xrd-desktop-cursor.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_and_submit_texture"
              c:identifier="xrd_desktop_cursor_set_and_submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-desktop-cursor.c"
             line="38">Sets and submits a texture.</doc>
        <source-position filename="../src/xrd-desktop-cursor.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="40">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="41">A #GulkanTexture that this #XrdDesktopCursor will own.</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hotspot" c:identifier="xrd_desktop_cursor_set_hotspot">
        <doc xml:space="preserve"
             filename="../src/xrd-desktop-cursor.c"
             line="53">A hotspot of (x, y) means that the hotspot is at x pixels right, y pixels
down from the top left corner of the texture.</doc>
        <source-position filename="../src/xrd-desktop-cursor.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="55">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="hotspot_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="56">The x component of the hotspot.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="hotspot_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="57">The y component of the hotspot.</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transformation"
              c:identifier="xrd_desktop_cursor_set_transformation">
        <source-position filename="../src/xrd-desktop-cursor.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="matrix" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width_meters"
              c:identifier="xrd_desktop_cursor_set_width_meters">
        <source-position filename="../src/xrd-desktop-cursor.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="meters" transfer-ownership="none">
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="xrd_desktop_cursor_show">
        <source-position filename="../src/xrd-desktop-cursor.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="submit_texture"
              c:identifier="xrd_desktop_cursor_submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-desktop-cursor.c"
             line="25">Submits current texture.</doc>
        <source-position filename="../src/xrd-desktop-cursor.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="27">The #XrdDesktopCursor</doc>
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="xrd_desktop_cursor_update">
        <source-position filename="../src/xrd-desktop-cursor.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="intersection" transfer-ownership="none">
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="DesktopCursorData" c:type="XrdDesktopCursorData">
      <source-position filename="../src/xrd-desktop-cursor.h" line="44"/>
      <field name="cursor" writable="1">
        <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
      </field>
      <field name="context" writable="1">
        <type name="Gxr.Context" c:type="GxrContext*"/>
      </field>
      <field name="keep_apparent_size" writable="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="width_meters" writable="1">
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="cached_width_meters" writable="1">
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="hotspot_x" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="hotspot_y" writable="1">
        <type name="gint" c:type="int"/>
      </field>
      <field name="texture_width" writable="1">
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="texture_height" writable="1">
        <type name="guint32" c:type="uint32_t"/>
      </field>
    </record>
    <record name="DesktopCursorInterface"
            c:type="XrdDesktopCursorInterface"
            glib:is-gtype-struct-for="DesktopCursor">
      <source-position filename="../src/xrd-desktop-cursor.h" line="79"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="submit_texture">
        <callback name="submit_texture">
          <source-position filename="../src/xrd-desktop-cursor.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-desktop-cursor.c"
                   line="27">The #XrdDesktopCursor</doc>
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_and_submit_texture">
        <callback name="set_and_submit_texture">
          <source-position filename="../src/xrd-desktop-cursor.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-desktop-cursor.c"
                   line="40">The #XrdDesktopCursor</doc>
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
            <parameter name="texture" transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../src/xrd-desktop-cursor.c"
                   line="41">A #GulkanTexture that this #XrdDesktopCursor will own.</doc>
              <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_texture">
        <callback name="get_texture">
          <source-position filename="../src/xrd-desktop-cursor.h" line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="76">a #GulkanTexture</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-desktop-cursor.c"
                   line="74">The #XrdDesktopCursor</doc>
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show">
          <source-position filename="../src/xrd-desktop-cursor.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide">
        <callback name="hide">
          <source-position filename="../src/xrd-desktop-cursor.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_width_meters">
        <callback name="set_width_meters">
          <source-position filename="../src/xrd-desktop-cursor.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
            <parameter name="meters" transfer-ownership="none">
              <type name="gfloat" c:type="float"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data">
        <callback name="get_data">
          <source-position filename="../src/xrd-desktop-cursor.h" line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-desktop-cursor.c"
                 line="110">a #XrdDesktopCursorData</doc>
            <type name="DesktopCursorData" c:type="XrdDesktopCursorData*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-desktop-cursor.c"
                   line="108">The #XrdDesktopCursor</doc>
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transformation">
        <callback name="get_transformation">
          <source-position filename="../src/xrd-desktop-cursor.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
            <parameter name="matrix" transfer-ownership="none">
              <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_transformation">
        <callback name="set_transformation">
          <source-position filename="../src/xrd-desktop-cursor.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DesktopCursor" c:type="XrdDesktopCursor*"/>
            </parameter>
            <parameter name="matrix" transfer-ownership="none">
              <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="GrabEvent" c:type="XrdGrabEvent">
      <doc xml:space="preserve"
           filename="../src/xrd-types.h"
           line="34">An event that gets emitted when a window get grabbed.</doc>
      <source-position filename="../src/xrd-types.h" line="44"/>
      <field name="pose" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="36">A #graphene_matrix_t pose.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="controller" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="37">The controller the event was captured on.</doc>
        <type name="Gxr.Controller" c:type="GxrController*"/>
      </field>
    </record>
    <record name="HoverEvent" c:type="XrdHoverEvent">
      <doc xml:space="preserve"
           filename="../src/xrd-types.h"
           line="18">An event that gets emitted when a controller hovers a window.</doc>
      <source-position filename="../src/xrd-types.h" line="32"/>
      <field name="point" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="20">The point in 3D world space.</doc>
        <type name="Graphene.Point3D" c:type="graphene_point3d_t"/>
      </field>
      <field name="pose" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="21">A #graphene_matrix_t pose.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="distance" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="22">Distance from the controller.</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="controller" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-types.h"
             line="23">The controller the event was captured on.</doc>
        <type name="Gxr.Controller" c:type="GxrController*"/>
      </field>
    </record>
    <enumeration name="HoverMode" c:type="XrdHoverMode">
      <doc xml:space="preserve"
           filename="../src/xrd-window-manager.h"
           line="80">A mode where input events can be ignored for certain widgets.</doc>
      <source-position filename="../src/xrd-window-manager.h" line="92"/>
      <member name="everything"
              value="0"
              c:identifier="XRD_HOVER_MODE_EVERYTHING">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="82">Buttons and windows should receive events.</doc>
      </member>
      <member name="buttons" value="1" c:identifier="XRD_HOVER_MODE_BUTTONS">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="83">Only buttons should receive events.</doc>
      </member>
    </enumeration>
    <class name="InputSynth"
           c:symbol-prefix="input_synth"
           c:type="XrdInputSynth"
           parent="GObject.Object"
           glib:type-name="XrdInputSynth"
           glib:get-type="xrd_input_synth_get_type"
           glib:type-struct="InputSynthClass">
      <source-position filename="../src/xrd-input-synth.h" line="24"/>
      <constructor name="new" c:identifier="xrd_input_synth_new">
        <source-position filename="../src/xrd-input-synth.h" line="74"/>
        <return-value transfer-ownership="full">
          <type name="InputSynth" c:type="XrdInputSynth*"/>
        </return-value>
      </constructor>
      <method name="create_action_set"
              c:identifier="xrd_input_synth_create_action_set">
        <source-position filename="../src/xrd-input-synth.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-input-synth.c"
               line="367">an #GxrActionSet that will be centrally owned by,
updated in and destroyed in #XrdClient.</doc>
          <type name="Gxr.ActionSet" c:type="GxrActionSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="364">the #XrdInputSynth</doc>
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="365">A #GxrContext</doc>
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_primary_controller"
              c:identifier="xrd_input_synth_get_primary_controller">
        <source-position filename="../src/xrd-input-synth.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-input-synth.c"
               line="414">The GxrController that is used for input synth.</doc>
          <type name="Gxr.Controller" c:type="GxrController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="412">The #XrdInputSynth</doc>
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_primary" c:identifier="xrd_input_synth_make_primary">
        <source-position filename="../src/xrd-input-synth.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="424">The #XrdInputSynth</doc>
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="425">The index of the controller that will be used for input synth.</doc>
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_cursor" c:identifier="xrd_input_synth_move_cursor">
        <source-position filename="../src/xrd-input-synth.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="controller_pose" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
          <parameter name="intersection" transfer-ownership="none">
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_press_state"
              c:identifier="xrd_input_synth_reset_press_state">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.c"
             line="117">Issue a button release event for every button that previously was used for a
button press event, but has not been released yet.

When calling this function, also consider xrd_input_synth_reset_scroll().</doc>
        <source-position filename="../src/xrd-input-synth.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="119">The #XrdInputSynth</doc>
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_scroll" c:identifier="xrd_input_synth_reset_scroll">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.c"
             line="436">Resets the internal state of the scrolling, so the in-flight scroll distance
on the touchpad is discarded.

When calling this function, also consider xrd_input_synth_reset_press_state()</doc>
        <source-position filename="../src/xrd-input-synth.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-input-synth.c"
                 line="438">The #XrdInputSynth</doc>
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="click-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-cursor-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="InputSynthButton" c:type="XrdInputSynthButton">
      <source-position filename="../src/xrd-input-synth.h" line="35"/>
      <member name="eft_button" value="1" c:identifier="LEFT_BUTTON">
      </member>
      <member name="iddle_button" value="2" c:identifier="MIDDLE_BUTTON">
      </member>
      <member name="ight_button" value="3" c:identifier="RIGHT_BUTTON">
      </member>
      <member name="croll_up" value="4" c:identifier="SCROLL_UP">
      </member>
      <member name="croll_down" value="5" c:identifier="SCROLL_DOWN">
      </member>
      <member name="croll_left" value="6" c:identifier="SCROLL_LEFT">
      </member>
      <member name="croll_right" value="7" c:identifier="SCROLL_RIGHT">
      </member>
    </enumeration>
    <record name="InputSynthClass"
            c:type="XrdInputSynthClass"
            glib:is-gtype-struct-for="InputSynth">
      <source-position filename="../src/xrd-input-synth.h" line="24"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MoveCursorEvent" c:type="XrdMoveCursorEvent">
      <doc xml:space="preserve"
           filename="../src/xrd-input-synth.h"
           line="55">A 2D mouse move event.

Ignoring this events means only updating the cursor position in VR so it
does not appear frozen, but don't actually synthesize mouse move events.</doc>
      <source-position filename="../src/xrd-input-synth.h" line="71"/>
      <field name="window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="57">The #XrdWindow on which the cursor was moved.</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </field>
      <field name="position" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="58">A #graphene_point_t with the current 2D screen position.</doc>
        <type name="Graphene.Point" c:type="graphene_point_t*"/>
      </field>
      <field name="ignore" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-input-synth.h"
             line="59">A #gboolean wheather the synthesis should be ignored.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="NoHoverEvent" c:type="XrdNoHoverEvent">
      <doc xml:space="preserve"
           filename="../src/xrd-window-manager.h"
           line="28">An event that gets emitted when a window is not being hovered anymore.</doc>
      <source-position filename="../src/xrd-window-manager.h" line="36"/>
      <field name="controller" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="30">A #GxrController.</doc>
        <type name="Gxr.Controller" c:type="GxrController*"/>
      </field>
    </record>
    <class name="ShakeCompensator"
           c:symbol-prefix="shake_compensator"
           c:type="XrdShakeCompensator"
           parent="GObject.Object"
           glib:type-name="XrdShakeCompensator"
           glib:get-type="xrd_shake_compensator_get_type"
           glib:type-struct="ShakeCompensatorClass">
      <source-position filename="../src/xrd-shake-compensator.h" line="22"/>
      <constructor name="new" c:identifier="xrd_shake_compensator_new">
        <source-position filename="../src/xrd-shake-compensator.h" line="24"/>
        <return-value transfer-ownership="full">
          <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
        </return-value>
      </constructor>
      <method name="get_button"
              c:identifier="xrd_shake_compensator_get_button">
        <source-position filename="../src/xrd-shake-compensator.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="InputSynthButton" c:type="XrdInputSynthButton"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_drag" c:identifier="xrd_shake_compensator_is_drag">
        <source-position filename="../src/xrd-shake-compensator.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="controller_pose" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
          <parameter name="intersection" transfer-ownership="none">
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_recording"
              c:identifier="xrd_shake_compensator_is_recording">
        <source-position filename="../src/xrd-shake-compensator.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="record" c:identifier="xrd_shake_compensator_record">
        <source-position filename="../src/xrd-shake-compensator.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="Graphene.Point" c:type="graphene_point_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replay_move_queue"
              c:identifier="xrd_shake_compensator_replay_move_queue">
        <source-position filename="../src/xrd-shake-compensator.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
          <parameter name="synth" transfer-ownership="none">
            <type name="InputSynth" c:type="XrdInputSynth*"/>
          </parameter>
          <parameter name="move_cursor_event_signal" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="hover_window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="xrd_shake_compensator_reset">
        <source-position filename="../src/xrd-shake-compensator.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start_recording"
              c:identifier="xrd_shake_compensator_start_recording">
        <source-position filename="../src/xrd-shake-compensator.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShakeCompensator" c:type="XrdShakeCompensator*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="InputSynthButton" c:type="XrdInputSynthButton"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ShakeCompensatorClass"
            c:type="XrdShakeCompensatorClass"
            glib:is-gtype-struct-for="ShakeCompensator">
      <source-position filename="../src/xrd-shake-compensator.h" line="22"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="TIP_APPARENT_SIZE_DISTANCE"
              value="3.000000"
              c:type="XRD_TIP_APPARENT_SIZE_DISTANCE">
      <source-position filename="../src/xrd-client.h" line="37"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="TIP_VIEWPORT_SCALE"
              value="3"
              c:type="XRD_TIP_VIEWPORT_SCALE">
      <source-position filename="../src/xrd-client.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="TransformTransition" c:type="XrdTransformTransition">
      <doc xml:space="preserve"
           filename="../src/xrd-window-manager.h"
           line="38">A transition between two #XrdWindow transformation states.</doc>
      <source-position filename="../src/xrd-window-manager.h" line="58"/>
      <field name="window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="40">A #XrdWindow.</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </field>
      <field name="from" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="41">The initial #graphene_matrix_t of the transiton.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="to" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="42">The final #graphene_matrix_t of the transition.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="from_scaling" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="43">The initial scale of the transition.</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="to_scaling" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="44">The final scale of the transition.</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="interpolate" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="45">The current state in the range [0-1] of the transition.</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="last_timestamp" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="46">The last timestamp the transition was updated.</doc>
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <interface name="Window"
               c:symbol-prefix="window"
               c:type="XrdWindow"
               glib:type-name="XrdWindow"
               glib:get-type="xrd_window_get_type"
               glib:type-struct="WindowInterface">
      <source-position filename="../src/xrd-window.h" line="178"/>
      <function name="new_from_data" c:identifier="xrd_window_new_from_data">
        <source-position filename="../src/xrd-window.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="216">a new #XrdWindow</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="213">a #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="214">a #XrdWindowData</doc>
            <type name="WindowData" c:type="XrdWindowData*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_meters"
                c:identifier="xrd_window_new_from_meters">
        <source-position filename="../src/xrd-window.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="233">a new #XrdWindow</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="227">a #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="228">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="229">the width</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="230">the height</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="231">the ppm</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_native"
                c:identifier="xrd_window_new_from_native">
        <source-position filename="../src/xrd-window.h" line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="274">a new #XrdWindow</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="267">a #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="268">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="native"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="269">the native window</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="width_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="270">the width</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="height_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="271">the height</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="272">the ppm</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_from_pixels"
                c:identifier="xrd_window_new_from_pixels">
        <source-position filename="../src/xrd-window.h" line="192"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="253">a new #XrdWindow</doc>
          <type name="Window" c:type="XrdWindow*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="247">a #XrdClient</doc>
            <type name="Client" c:type="XrdClient*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="248">the title</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="249">the width</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="250">the height</doc>
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
          <parameter name="ppm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="251">the ppm</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_child" invoker="add_child">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="587">x axis points right, y axis points up.</doc>
        <source-position filename="../src/xrd-window.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="589">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="590">An already existing window.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="offset_center" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="591">The offset of the child window's center to the parent
window's center in pixels.</doc>
            <type name="Graphene.Point" c:type="graphene_point_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_grab" invoker="emit_grab">
        <source-position filename="../src/xrd-window.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="GrabEvent" c:type="XrdGrabEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_grab_start" invoker="emit_grab_start">
        <source-position filename="../src/xrd-window.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_hover" invoker="emit_hover">
        <source-position filename="../src/xrd-window.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="HoverEvent" c:type="XrdHoverEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_hover_end" invoker="emit_hover_end">
        <source-position filename="../src/xrd-window.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_hover_start" invoker="emit_hover_start">
        <source-position filename="../src/xrd-window.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="emit_release" invoker="emit_release">
        <source-position filename="../src/xrd-window.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data" invoker="get_data">
        <source-position filename="../src/xrd-window.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="683">a #XrdWindowData</doc>
          <type name="WindowData" c:type="XrdWindowData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="681">a #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_texture" invoker="get_texture">
        <source-position filename="../src/xrd-window.h" line="128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="349">The last #GulkanTexture submitted with
xrd_window_submit_texture(), or %NULL if none has been submitted so far.</doc>
          <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="348">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transformation" invoker="get_transformation">
        <source-position filename="../src/xrd-window.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transformation_no_scale"
                      invoker="get_transformation_no_scale">
        <source-position filename="../src/xrd-window.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="hide" invoker="hide">
        <source-position filename="../src/xrd-window.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_visible" invoker="is_visible">
        <source-position filename="../src/xrd-window.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="poll_event" invoker="poll_event">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="429">Must be called periodically to receive events from this window.</doc>
        <source-position filename="../src/xrd-window.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="431">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_and_submit_texture"
                      invoker="set_and_submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="323">For performance reason it is a good idea to not set a new texture every
time the window content changes. Instead the the cached texture should be
acquired with xrd_window_get_texture() and resubmitted with
xrd_window_submit_texture()..
If the window/texture size changes, a new texture should be submitted
(the previous submitted texture does not need to be unref'ed).

This function also submits the @texture.</doc>
        <source-position filename="../src/xrd-window.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="325">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="326">A #GulkanTexture that is created by the caller.
Ownership of this texture is transferred to the #XrdWindow.</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_color" invoker="set_color">
        <source-position filename="../src/xrd-window.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Graphene.Vec3" c:type="const graphene_vec3_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_flip_y" invoker="set_flip_y">
        <source-position filename="../src/xrd-window.h" line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="flip_y" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_sort_order" invoker="set_sort_order">
        <doc xml:space="preserve"
             filename="src/xrd-window.c"
             line="285">Sets the sort order of the window. Only works for overlay windows, has no effect
on scene windows, returns true if the sort order was changed. Will return false for
scene windows.</doc>
	<source-position filename="../src/xrd-window.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/xrd-window.c"
                 line="287">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="sort_order" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_transformation" invoker="set_transformation">
        <source-position filename="../src/xrd-window.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show" invoker="show">
        <source-position filename="../src/xrd-window.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="submit_texture" invoker="submit_texture">
        <source-position filename="../src/xrd-window.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="312">The #XrdWindow
After new content has been rendered into a texture, this function must be
called to reflect the changed texture on screen.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_child" c:identifier="xrd_window_add_child">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="587">x axis points right, y axis points up.</doc>
        <source-position filename="../src/xrd-window.h" line="265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="589">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="590">An already existing window.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="offset_center" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="591">The offset of the child window's center to the parent
window's center in pixels.</doc>
            <type name="Graphene.Point" c:type="graphene_point_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="xrd_window_close">
        <source-position filename="../src/xrd-window.h" line="346"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="843">The #XrdWindow
MUST be called when destroying a window to free its resources.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deselect" c:identifier="xrd_window_deselect">
        <source-position filename="../src/xrd-window.h" line="273"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_grab" c:identifier="xrd_window_emit_grab">
        <source-position filename="../src/xrd-window.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="GrabEvent" c:type="XrdGrabEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_grab_start" c:identifier="xrd_window_emit_grab_start">
        <source-position filename="../src/xrd-window.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_hover" c:identifier="xrd_window_emit_hover">
        <source-position filename="../src/xrd-window.h" line="257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="HoverEvent" c:type="XrdHoverEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_hover_end" c:identifier="xrd_window_emit_hover_end">
        <source-position filename="../src/xrd-window.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_hover_start"
              c:identifier="xrd_window_emit_hover_start">
        <source-position filename="../src/xrd-window.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_release" c:identifier="xrd_window_emit_release">
        <source-position filename="../src/xrd-window.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_selection" c:identifier="xrd_window_end_selection">
        <source-position filename="../src/xrd-window.h" line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aspect_ratio"
              c:identifier="xrd_window_get_aspect_ratio">
        <source-position filename="../src/xrd-window.h" line="321"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_height_meters"
              c:identifier="xrd_window_get_current_height_meters">
        <source-position filename="../src/xrd-window.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="413">The current world space height of the window in meters.</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="411">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_ppm" c:identifier="xrd_window_get_current_ppm">
        <source-position filename="../src/xrd-window.h" line="286"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_width_meters"
              c:identifier="xrd_window_get_current_width_meters">
        <source-position filename="../src/xrd-window.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="393">The current world space width of the window in meters.</doc>
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="391">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data" c:identifier="xrd_window_get_data">
        <source-position filename="../src/xrd-window.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="683">a #XrdWindowData</doc>
          <type name="WindowData" c:type="XrdWindowData*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="681">a #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initial_ppm" c:identifier="xrd_window_get_initial_ppm">
        <source-position filename="../src/xrd-window.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_intersection_2d"
              c:identifier="xrd_window_get_intersection_2d">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="504">Calculates the offset of the intersection relative to the overlay's center,
in overlay-relative coordinates, in meters</doc>
        <source-position filename="../src/xrd-window.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="506">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="intersection_3d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="507">A #graphene_point3d_t intersection point in meters.</doc>
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
          <parameter name="intersection_2d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="508">Intersection in window coordinates with origin at center in meters.</doc>
            <type name="Graphene.Point" c:type="graphene_point_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_intersection_2d_pixels"
              c:identifier="xrd_window_get_intersection_2d_pixels">
        <source-position filename="../src/xrd-window.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="444">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="intersection_3d" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="445">A #graphene_point3d_t intersection point in meters.</doc>
            <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
          </parameter>
          <parameter name="intersection_pixels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="446">Intersection in window coordinates with the origin at top/left in pixels.</doc>
            <type name="Graphene.Point" c:type="graphene_point_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_normal" c:identifier="xrd_window_get_normal">
        <source-position filename="../src/xrd-window.h" line="313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="normal" transfer-ownership="none">
            <type name="Graphene.Vec3" c:type="graphene_vec3_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_plane" c:identifier="xrd_window_get_plane">
        <source-position filename="../src/xrd-window.h" line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <type name="Graphene.Plane" c:type="graphene_plane_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_reset_transformation"
              c:identifier="xrd_window_get_reset_transformation">
        <source-position filename="../src/xrd-window.h" line="334"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="transform" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_texture" c:identifier="xrd_window_get_texture">
        <source-position filename="../src/xrd-window.h" line="224"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="349">The last #GulkanTexture submitted with
xrd_window_submit_texture(), or %NULL if none has been submitted so far.</doc>
          <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="348">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transformation"
              c:identifier="xrd_window_get_transformation">
        <source-position filename="../src/xrd-window.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transformation_no_scale"
              c:identifier="xrd_window_get_transformation_no_scale">
        <source-position filename="../src/xrd-window.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="xrd_window_hide">
        <source-position filename="../src/xrd-window.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_pinned" c:identifier="xrd_window_is_pinned">
        <source-position filename="../src/xrd-window.h" line="343"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_selected" c:identifier="xrd_window_is_selected">
        <source-position filename="../src/xrd-window.h" line="276"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_visible" c:identifier="xrd_window_is_visible">
        <source-position filename="../src/xrd-window.h" line="298"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="poll_event" c:identifier="xrd_window_poll_event">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="429">Must be called periodically to receive events from this window.</doc>
        <source-position filename="../src/xrd-window.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="431">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_reset_transformation"
              c:identifier="xrd_window_save_reset_transformation">
        <source-position filename="../src/xrd-window.h" line="327"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="770">The #XrdWindow
Saves the current transformation as the reset transformation.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select" c:identifier="xrd_window_select">
        <source-position filename="../src/xrd-window.h" line="270"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_and_submit_texture"
              c:identifier="xrd_window_set_and_submit_texture">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="323">For performance reason it is a good idea to not set a new texture every
time the window content changes. Instead the the cached texture should be
acquired with xrd_window_get_texture() and resubmitted with
xrd_window_submit_texture()..
If the window/texture size changes, a new texture should be submitted
(the previous submitted texture does not need to be unref'ed).

This function also submits the @texture.</doc>
        <source-position filename="../src/xrd-window.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="325">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="texture" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="326">A #GulkanTexture that is created by the caller.
Ownership of this texture is transferred to the #XrdWindow.</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color" c:identifier="xrd_window_set_color">
        <source-position filename="../src/xrd-window.h" line="324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="color" transfer-ownership="none">
            <type name="Graphene.Vec3" c:type="const graphene_vec3_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flip_y" c:identifier="xrd_window_set_flip_y">
        <source-position filename="../src/xrd-window.h" line="282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="flip_y" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pin" c:identifier="xrd_window_set_pin">
        <source-position filename="../src/xrd-window.h" line="338"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="806">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="pinned" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="807">The pin status to set this window to</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="hide_unpinned" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="808">If TRUE, the window will be hidden if it is unpinned, and
shown if it is pinned. This corresponds to the "show only pinned windows"
mode set up in #XrdClient.
If FALSE, windows are always shown.
Note that @hide_unpinned only determines initial visibility, and does not
keep track of further mode changes.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reset_transformation"
              c:identifier="xrd_window_set_reset_transformation">
        <source-position filename="../src/xrd-window.h" line="330"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="785">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="transform" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="786">A transformation matrix to save as reset transform.</doc>
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_order" c:identifier="xrd_window_set_sort_order">
        <doc xml:space="preserve"
             filename="src/xrd-window.c"
             line="285">Sets the sort order of the window. Only works for overlay windows, has no effect
on scene windows, returns true if the sort order was changed. Will return false for
scene windows.</doc>
        <source-position filename="src/xrd-window.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/xrd-window.c"
                 line="287">The #XrdWindow</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="sort_order" transfer-ownership="none">
            <type name="guint32" c:type="uint32_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transformation"
              c:identifier="xrd_window_set_transformation">
        <source-position filename="../src/xrd-window.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
          <parameter name="mat" transfer-ownership="none">
            <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="xrd_window_show">
        <source-position filename="../src/xrd-window.h" line="292"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="submit_texture" c:identifier="xrd_window_submit_texture">
        <source-position filename="../src/xrd-window.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="312">The #XrdWindow
After new content has been rendered into a texture, this function must be
called to reflect the changed texture on screen.</doc>
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_child" c:identifier="xrd_window_update_child">
        <source-position filename="../src/xrd-window.h" line="310"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="initial-height-meters"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="initial-width-meters"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="native"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="scale"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="texture-height"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="texture-width"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="button-press-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="button-release-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="destroy" when="cleanup" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="grab-event" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="grab-start-event" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hover-end-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hover-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="hover-start-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="keyboard-close-event" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="keyboard-press-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="motion-notify-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="release-event" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="scroll-event" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="show" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="WindowData" c:type="XrdWindowData">
      <doc xml:space="preserve"
           filename="../src/xrd-window.h"
           line="29">Common struct for scene and overlay windows.</doc>
      <source-position filename="../src/xrd-window.h" line="76"/>
      <field name="native" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="31">A native pointer to a window struct from a window manager.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="texture_width" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="32">The width of the last submitted texture in pixels.</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="texture_height" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="33">The height of the last submitted texture in pixels.</doc>
        <type name="guint32" c:type="uint32_t"/>
      </field>
      <field name="title" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="34">A window title.</doc>
        <type name="GLib.String" c:type="GString*"/>
      </field>
      <field name="initial_size_meters" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="35">The window dimensions in meters without scale.</doc>
        <type name="Graphene.Point" c:type="graphene_point_t"/>
      </field>
      <field name="scale" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="36">A user applied scale.</doc>
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="transform" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="37">The transformation #graphene_matrix_t of the window.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="child_window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="38">A window that is pinned on top of this window and follows this window's position and scaling.</doc>
        <type name="gpointer" c:type="XrdWindowData*"/>
      </field>
      <field name="parent_window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="39">The parent window, %NULL if the window does not have a parent.</doc>
        <type name="gpointer" c:type="XrdWindowData*"/>
      </field>
      <field name="child_offset_center" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="40">If the window is a child, this stores the 2D offset to the parent in meters.</doc>
        <type name="Graphene.Point" c:type="graphene_point_t"/>
      </field>
      <field name="reset_transform" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="41">The transformation that the window will be reset to.</doc>
        <type name="Graphene.Matrix" c:type="graphene_matrix_t"/>
      </field>
      <field name="pinned" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="42">Whether the window will be visible in pinned only mode.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="texture" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="43">Cache of the currently rendered texture.</doc>
        <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
      </field>
      <field name="xrd_window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="44">A pointer to the #XrdWindow this XrdWindowData belongs to.</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </field>
      <field name="owned_by_window" writable="1">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="45">If TRUE, Xrd*Window finalization must free this XrdWindowData
After switching the overlay/scene mode, it will point to a new #XrdWindow.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <bitfield name="WindowFlags" c:type="XrdWindowFlags">
      <doc xml:space="preserve"
           filename="../src/xrd-window-manager.h"
           line="60">Flags for the window manager.</doc>
      <source-position filename="../src/xrd-window-manager.h" line="78"/>
      <member name="hoverable" value="1" c:identifier="XRD_WINDOW_HOVERABLE">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="62">Set if hover events should be generated.</doc>
      </member>
      <member name="draggable" value="2" c:identifier="XRD_WINDOW_DRAGGABLE">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="63">Set if the window should be draggable.</doc>
      </member>
      <member name="managed" value="4" c:identifier="XRD_WINDOW_MANAGED">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="64">Set if window should be manipulated by window manager auto alignment.</doc>
      </member>
      <member name="destroy_with_parent"
              value="8"
              c:identifier="XRD_WINDOW_DESTROY_WITH_PARENT">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="65">Set if window should be destroyed with the window manager.</doc>
      </member>
      <member name="button" value="16" c:identifier="XRD_WINDOW_BUTTON">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.h"
             line="66">Set if window is a button.</doc>
      </member>
    </bitfield>
    <record name="WindowInterface"
            c:type="XrdWindowInterface"
            glib:is-gtype-struct-for="Window">
      <source-position filename="../src/xrd-window.h" line="178"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="80">parent</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="set_sort_order">
        <callback name="set_sort_order">
          <source-position filename="src/xrd-window.h" line="110"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/xrd-window.c"
                   line="287">The #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="sort_order" transfer-ownership="none">
              <type name="guint32" c:type="uint32_t"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_transformation">
        <callback name="set_transformation">
          <source-position filename="../src/xrd-window.h" line="109"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="mat" transfer-ownership="none">
              <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transformation">
        <callback name="get_transformation">
          <source-position filename="../src/xrd-window.h" line="113"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="mat" transfer-ownership="none">
              <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transformation_no_scale">
        <callback name="get_transformation_no_scale">
          <source-position filename="../src/xrd-window.h" line="117"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="mat" transfer-ownership="none">
              <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="submit_texture">
        <callback name="submit_texture">
          <source-position filename="../src/xrd-window.h" line="121"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="312">The #XrdWindow
After new content has been rendered into a texture, this function must be
called to reflect the changed texture on screen.</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_and_submit_texture">
        <callback name="set_and_submit_texture">
          <source-position filename="../src/xrd-window.h" line="124"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="325">The #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="texture" transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="326">A #GulkanTexture that is created by the caller.
Ownership of this texture is transferred to the #XrdWindow.</doc>
              <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_texture">
        <callback name="get_texture">
          <source-position filename="../src/xrd-window.h" line="128"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="349">The last #GulkanTexture submitted with
xrd_window_submit_texture(), or %NULL if none has been submitted so far.</doc>
            <type name="Gulkan.Texture" c:type="GulkanTexture*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="348">The #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="poll_event">
        <callback name="poll_event">
          <source-position filename="../src/xrd-window.h" line="131"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="431">The #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_grab_start">
        <callback name="emit_grab_start">
          <source-position filename="../src/xrd-window.h" line="134"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="controller" transfer-ownership="none">
              <type name="Gxr.Controller" c:type="GxrController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_grab">
        <callback name="emit_grab">
          <source-position filename="../src/xrd-window.h" line="137"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="GrabEvent" c:type="XrdGrabEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_release">
        <callback name="emit_release">
          <source-position filename="../src/xrd-window.h" line="140"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="controller" transfer-ownership="none">
              <type name="Gxr.Controller" c:type="GxrController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_hover_end">
        <callback name="emit_hover_end">
          <source-position filename="../src/xrd-window.h" line="143"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="controller" transfer-ownership="none">
              <type name="Gxr.Controller" c:type="GxrController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_hover">
        <callback name="emit_hover">
          <source-position filename="../src/xrd-window.h" line="146"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="HoverEvent" c:type="XrdHoverEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="emit_hover_start">
        <callback name="emit_hover_start">
          <source-position filename="../src/xrd-window.h" line="149"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="controller" transfer-ownership="none">
              <type name="Gxr.Controller" c:type="GxrController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_child">
        <callback name="add_child">
          <source-position filename="../src/xrd-window.h" line="152"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="589">The #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="590">An already existing window.</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="offset_center" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="591">The offset of the child window's center to the parent
window's center in pixels.</doc>
              <type name="Graphene.Point" c:type="graphene_point_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_color">
        <callback name="set_color">
          <source-position filename="../src/xrd-window.h" line="156"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="color" transfer-ownership="none">
              <type name="Graphene.Vec3" c:type="const graphene_vec3_t*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_flip_y">
        <callback name="set_flip_y">
          <source-position filename="../src/xrd-window.h" line="159"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
            <parameter name="flip_y" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="show">
        <callback name="show">
          <source-position filename="../src/xrd-window.h" line="163"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="hide">
        <callback name="hide">
          <source-position filename="../src/xrd-window.h" line="166"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_visible">
        <callback name="is_visible">
          <source-position filename="../src/xrd-window.h" line="169"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="constructed">
        <callback name="constructed">
          <source-position filename="../src/xrd-window.h" line="172"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data">
        <callback name="get_data">
          <source-position filename="../src/xrd-window.h" line="175"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window.c"
                 line="683">a #XrdWindowData</doc>
            <type name="WindowData" c:type="XrdWindowData*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/xrd-window.c"
                   line="681">a #XrdWindow</doc>
              <type name="Window" c:type="XrdWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="windows_created">
        <doc xml:space="preserve"
             filename="../src/xrd-window.h"
             line="102">Static counter how many windows were created, used for creating automatic overlay names.</doc>
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <class name="WindowManager"
           c:symbol-prefix="window_manager"
           c:type="XrdWindowManager"
           parent="GObject.Object"
           glib:type-name="XrdWindowManager"
           glib:get-type="xrd_window_manager_get_type"
           glib:type-struct="WindowManagerClass">
      <source-position filename="../src/xrd-window-manager.h" line="25"/>
      <constructor name="new" c:identifier="xrd_window_manager_new">
        <source-position filename="../src/xrd-window-manager.h" line="94"/>
        <return-value transfer-ownership="full">
          <type name="WindowManager" c:type="XrdWindowManager*"/>
        </return-value>
      </constructor>
      <method name="add_container"
              c:identifier="xrd_window_manager_add_container">
        <source-position filename="../src/xrd-window-manager.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="container" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_window" c:identifier="xrd_window_manager_add_window">
        <source-position filename="../src/xrd-window-manager.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="WindowFlags" c:type="XrdWindowFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="arrange_reset"
              c:identifier="xrd_window_manager_arrange_reset">
        <source-position filename="../src/xrd-window-manager.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="arrange_sphere"
              c:identifier="xrd_window_manager_arrange_sphere">
        <source-position filename="../src/xrd-window-manager.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_grab" c:identifier="xrd_window_manager_check_grab">
        <source-position filename="../src/xrd-window-manager.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_release"
              c:identifier="xrd_window_manager_check_release">
        <source-position filename="../src/xrd-window-manager.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="drag_start" c:identifier="xrd_window_manager_drag_start">
        <source-position filename="../src/xrd-window-manager.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buttons" c:identifier="xrd_window_manager_get_buttons">
        <source-position filename="../src/xrd-window-manager.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window-manager.c"
               line="724">A list of #XrdWindow.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="722">The #XrdWindowManager</doc>
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hover_mode"
              c:identifier="xrd_window_manager_get_hover_mode">
        <source-position filename="../src/xrd-window-manager.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="HoverMode" c:type="XrdHoverMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_windows" c:identifier="xrd_window_manager_get_windows">
        <source-position filename="../src/xrd-window-manager.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window-manager.c"
               line="712">A list of #XrdWindow.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="710">The #XrdWindowManager</doc>
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="poll_window_events"
              c:identifier="xrd_window_manager_poll_window_events">
        <source-position filename="../src/xrd-window-manager.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Gxr.Context" c:type="GxrContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_container"
              c:identifier="xrd_window_manager_remove_container">
        <source-position filename="../src/xrd-window-manager.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="container" transfer-ownership="none">
            <type name="Container" c:type="XrdContainer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_window"
              c:identifier="xrd_window_manager_remove_window">
        <source-position filename="../src/xrd-window-manager.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XrdWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scale" c:identifier="xrd_window_manager_scale">
        <doc xml:space="preserve"
             filename="../src/xrd-window-manager.c"
             line="573">While dragging a window, scale the window *factor* times per second</doc>
        <source-position filename="../src/xrd-window-manager.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="575">The #XrdWindowManager</doc>
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="grab_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="576">The #XrdGrabState to scale</doc>
            <type name="Gxr.GrabState" c:type="GxrGrabState*"/>
          </parameter>
          <parameter name="factor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="577">Scale factor</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
          <parameter name="update_rate_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/xrd-window-manager.c"
                 line="578">The update rate in ms</doc>
            <type name="gfloat" c:type="float"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hover_mode"
              c:identifier="xrd_window_manager_set_hover_mode">
        <source-position filename="../src/xrd-window-manager.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="HoverMode" c:type="XrdHoverMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_controller"
              c:identifier="xrd_window_manager_update_controller">
        <source-position filename="../src/xrd-window-manager.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WindowManager" c:type="XrdWindowManager*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gxr.Controller" c:type="GxrController*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="no-hover-event" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gdk.Event"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WindowManagerClass"
            c:type="XrdWindowManagerClass"
            glib:is-gtype-struct-for="WindowManager">
      <source-position filename="../src/xrd-window-manager.h" line="25"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function name="button_set_icon" c:identifier="xrd_button_set_icon">
      <source-position filename="../src/xrd-button.h" line="29"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="button" transfer-ownership="none">
          <type name="Window" c:type="XrdWindow*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <type name="Gulkan.Client" c:type="GulkanClient*"/>
        </parameter>
        <parameter name="upload_layout" transfer-ownership="none">
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="url" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="button_set_text" c:identifier="xrd_button_set_text">
      <source-position filename="../src/xrd-button.h" line="22"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="button" transfer-ownership="none">
          <type name="Window" c:type="XrdWindow*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <type name="Gulkan.Client" c:type="GulkanClient*"/>
        </parameter>
        <parameter name="upload_layout" transfer-ownership="none">
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="label_count" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_clamp_towards_zero_2d"
              c:identifier="xrd_math_clamp_towards_zero_2d">
      <source-position filename="../src/xrd-math.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/xrd-math.c"
             line="146">TRUE if the point was clamped, else FALSE.

The bottom left "min" and top right "max" limits define a rectangle.
Clamp a value to the borders of this rectangle such that both x and y go
towards zero, until a rectangle border is hit.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="min" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="141">The (x,y) limit at the bottom left.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="142">The (x,y) limit at the top right.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="point" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="143">An (x,y) point, will be clamped if outside the min, max limits.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="clamped" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="144">The clamped point, if the point was outside the limits.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_get_rotation_angles"
              c:identifier="xrd_math_get_rotation_angles">
      <doc xml:space="preserve"
           filename="../src/xrd-math.c"
           line="31">Calculate spherical angles from a direction vector with the direction
vector's origin as the origin of the sphere.

Note that the distance (sphere radius) is not calculated. For converting
between spherical and 3D coordinates, the caller needs to keep track of it.</doc>
      <source-position filename="../src/xrd-math.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="direction" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="33">a direction vector</doc>
          <type name="Graphene.Vec3" c:type="graphene_vec3_t*"/>
        </parameter>
        <parameter name="azimuth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="34">clockwise angle in deg around the y axis, starting at -z:
"left-right" component.</doc>
          <type name="gfloat" c:type="float*"/>
        </parameter>
        <parameter name="inclination" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="36">upwards angle in deg from the xz plane: "up-down" component.</doc>
          <type name="gfloat" c:type="float*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_intersect_lines_2d"
              c:identifier="xrd_math_intersect_lines_2d">
      <source-position filename="../src/xrd-math.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/xrd-math.c"
             line="101">TRUE if the lines intersect, else FALSE.

2 lines are given by 2 consecutive (x,y) points each.
Based on an algorithm in Andre LeMothe's
"Tricks of the Windows Game Programming Gurus".
Implementation from https://stackoverflow.com/a/1968345</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="p0" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="95">The first point of the first line.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="p1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="96">The second point of the first line.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="p2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="97">The first point of the second line.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="p3" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="98">The second point of the second line.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
        <parameter name="intersection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="99">The resulting intersection point, if the lines intersect.</doc>
          <type name="Graphene.Point" c:type="graphene_point_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_matrix_set_translation_point"
              c:identifier="xrd_math_matrix_set_translation_point">
      <source-position filename="../src/xrd-math.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="matrix" transfer-ownership="none">
          <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
        </parameter>
        <parameter name="point" transfer-ownership="none">
          <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_matrix_set_translation_vec"
              c:identifier="xrd_math_matrix_set_translation_vec">
      <source-position filename="../src/xrd-math.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="matrix" transfer-ownership="none">
          <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
        </parameter>
        <parameter name="vec" transfer-ownership="none">
          <type name="Graphene.Vec3" c:type="graphene_vec3_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_point_matrix_distance"
              c:identifier="xrd_math_point_matrix_distance">
      <source-position filename="../src/xrd-math.h" line="23"/>
      <return-value transfer-ownership="none">
        <type name="gfloat" c:type="float"/>
      </return-value>
      <parameters>
        <parameter name="intersection_point" transfer-ownership="none">
          <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
        </parameter>
        <parameter name="pose" transfer-ownership="none">
          <type name="Graphene.Matrix" c:type="graphene_matrix_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="math_sphere_to_3d_coords"
              c:identifier="xrd_math_sphere_to_3d_coords">
      <source-position filename="../src/xrd-math.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="azimuth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="195">rotation around y axis, starting at -z. "left-right" component.</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="inclination" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="196">rotation upwards from xz plane. "up-down" component".</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="distance" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="197">the radius of the sphere</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="point" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-math.c"
               line="198">the resulting point in 3D space on the surface of a sphere around
(0,0,0) with @distance.</doc>
          <type name="Graphene.Point3D" c:type="graphene_point3d_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="render_lock" c:identifier="xrd_render_lock">
      <source-position filename="../src/xrd-render-lock.h" line="24"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="render_lock_destroy"
              c:identifier="xrd_render_lock_destroy">
      <source-position filename="../src/xrd-render-lock.h" line="21"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="render_lock_init" c:identifier="xrd_render_lock_init">
      <source-position filename="../src/xrd-render-lock.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="render_unlock" c:identifier="xrd_render_unlock">
      <source-position filename="../src/xrd-render-lock.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="settings_connect_and_apply"
              c:identifier="xrd_settings_connect_and_apply">
      <doc xml:space="preserve"
           filename="../src/xrd-settings.c"
           line="62">Use this convenience function when you don't want to initially read a config
value from the settings, and then connect a callback to when the value
changes.

Instead write only one callback that handles initially setting the value, as
well as any updates to this value.</doc>
      <source-position filename="../src/xrd-settings.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="64">A function that will be called with the given
@key and @data 1) immediately and 2) when the value for the given key is
updated.</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="67">The settings key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="68">A pointer that will be passed to the update callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="settings_destroy_instance"
              c:identifier="xrd_settings_destroy_instance">
      <source-position filename="../src/xrd-settings.h" line="24"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="settings_get_instance"
              c:identifier="xrd_settings_get_instance">
      <source-position filename="../src/xrd-settings.h" line="21"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/xrd-settings.c"
             line="33">The #GSettings for xrdesktop</doc>
        <type name="Gio.Settings" c:type="GSettings*"/>
      </return-value>
    </function>
    <function name="settings_is_schema_installed"
              c:identifier="xrd_settings_is_schema_installed">
      <source-position filename="../src/xrd-settings.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="settings_update_double_val"
              c:identifier="xrd_settings_update_double_val">
      <doc xml:space="preserve"
           filename="../src/xrd-settings.c"
           line="93">Convencience callback that can be registered when no action is required on
an update of a double value.</doc>
      <source-position filename="../src/xrd-settings.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="95">The gsettings</doc>
          <type name="Gio.Settings" c:type="GSettings*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="96">The key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="97">Pointer to a double value to be updated</doc>
          <type name="gdouble" c:type="double*"/>
        </parameter>
      </parameters>
    </function>
    <function name="settings_update_gboolean_val"
              c:identifier="xrd_settings_update_gboolean_val">
      <doc xml:space="preserve"
           filename="../src/xrd-settings.c"
           line="127">Convencience callback that can be registered when no action is required on
an update of a gboolean value.</doc>
      <source-position filename="../src/xrd-settings.h" line="38"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="129">The gsettings</doc>
          <type name="Gio.Settings" c:type="GSettings*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="130">The key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="131">Pointer to an gboolean value to be updated</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="settings_update_int_val"
              c:identifier="xrd_settings_update_int_val">
      <doc xml:space="preserve"
           filename="../src/xrd-settings.c"
           line="110">Convencience callback that can be registered when no action is required on
an update of a int value.</doc>
      <source-position filename="../src/xrd-settings.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="112">The gsettings</doc>
          <type name="Gio.Settings" c:type="GSettings*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="113">The key</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="val"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/xrd-settings.c"
               line="114">Pointer to an int value to be updated</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_new_from_data"
              c:identifier="xrd_window_new_from_data"
              moved-to="Window.new_from_data">
      <source-position filename="../src/xrd-window.h" line="181"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="216">a new #XrdWindow</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="213">a #XrdClient</doc>
          <type name="Client" c:type="XrdClient*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="214">a #XrdWindowData</doc>
          <type name="WindowData" c:type="XrdWindowData*"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_new_from_meters"
              c:identifier="xrd_window_new_from_meters"
              moved-to="Window.new_from_meters">
      <source-position filename="../src/xrd-window.h" line="185"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="233">a new #XrdWindow</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="227">a #XrdClient</doc>
          <type name="Client" c:type="XrdClient*"/>
        </parameter>
        <parameter name="title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="228">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="229">the width</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="230">the height</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
        <parameter name="ppm" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="231">the ppm</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_new_from_native"
              c:identifier="xrd_window_new_from_native"
              moved-to="Window.new_from_native">
      <source-position filename="../src/xrd-window.h" line="199"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="274">a new #XrdWindow</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="267">a #XrdClient</doc>
          <type name="Client" c:type="XrdClient*"/>
        </parameter>
        <parameter name="title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="268">the title</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="native"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="269">the native window</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="width_pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="270">the width</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="height_pixels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="271">the height</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="ppm" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="272">the ppm</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
    <function name="window_new_from_pixels"
              c:identifier="xrd_window_new_from_pixels"
              moved-to="Window.new_from_pixels">
      <source-position filename="../src/xrd-window.h" line="192"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../src/xrd-window.c"
             line="253">a new #XrdWindow</doc>
        <type name="Window" c:type="XrdWindow*"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="247">a #XrdClient</doc>
          <type name="Client" c:type="XrdClient*"/>
        </parameter>
        <parameter name="title" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="248">the title</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="249">the width</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="250">the height</doc>
          <type name="guint32" c:type="uint32_t"/>
        </parameter>
        <parameter name="ppm" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/xrd-window.c"
               line="251">the ppm</doc>
          <type name="gfloat" c:type="float"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
