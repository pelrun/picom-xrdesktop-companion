// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 3896faadf111)
// DO NOT EDIT

use crate::Window;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "XrdContainer")]
    pub struct Container(Object<ffi::XrdContainer, ffi::XrdContainerClass>);

    match fn {
        type_ => || ffi::xrd_container_get_type(),
    }
}

impl Container {
    #[doc(alias = "xrd_container_new")]
    pub fn new() -> Container {
        unsafe { from_glib_full(ffi::xrd_container_new()) }
    }

    /// ## `window`
    /// The window to add
    /// ## `relative_transform`
    /// the transform of the window's center relative to the
    /// container's center when XRD_CONTAINER_RELATIVE is used, ignored else (may
    /// be NULL then).
    #[doc(alias = "xrd_container_add_window")]
    pub fn add_window(&self, window: &impl IsA<Window>, relative_transform: &mut graphene::Matrix) {
        unsafe {
            ffi::xrd_container_add_window(
                self.to_glib_none().0,
                window.as_ref().to_glib_none().0,
                relative_transform.to_glib_none_mut().0,
            );
        }
    }

    /// Places the container in the center of the FOV at the given distance.
    /// ## `context`
    /// A [`gxr::Context`][crate::gxr::Context]
    /// ## `distance`
    /// The distance from the HMD the container should have.
    #[doc(alias = "xrd_container_center_view")]
    pub fn center_view(&self, context: &impl IsA<gxr::Context>, distance: f32) {
        unsafe {
            ffi::xrd_container_center_view(
                self.to_glib_none().0,
                context.as_ref().to_glib_none().0,
                distance,
            );
        }
    }

    #[doc(alias = "xrd_container_get_distance")]
    #[doc(alias = "get_distance")]
    pub fn distance(&self) -> f32 {
        unsafe { ffi::xrd_container_get_distance(self.to_glib_none().0) }
    }

    ///
    /// # Returns
    ///
    /// A list of [`Window`][crate::Window]
    /// contained in this container. The list must be destroyed by the caller.
    #[doc(alias = "xrd_container_get_windows")]
    #[doc(alias = "get_windows")]
    pub fn windows(&self) -> Vec<Window> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::xrd_container_get_windows(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "xrd_container_hide")]
    pub fn hide(&self) {
        unsafe {
            ffi::xrd_container_hide(self.to_glib_none().0);
        }
    }

    #[doc(alias = "xrd_container_is_visible")]
    pub fn is_visible(&self) -> bool {
        unsafe { from_glib(ffi::xrd_container_is_visible(self.to_glib_none().0)) }
    }

    #[doc(alias = "xrd_container_remove_window")]
    pub fn remove_window(&self, window: &impl IsA<Window>) {
        unsafe {
            ffi::xrd_container_remove_window(
                self.to_glib_none().0,
                window.as_ref().to_glib_none().0,
            );
        }
    }

    //#[doc(alias = "xrd_container_set_attachment")]
    //pub fn set_attachment(&self, attachment: /*Ignored*/ContainerAttachment, controller: &gxr::Controller) {
    //    unsafe { TODO: call ffi:xrd_container_set_attachment() }
    //}

    #[doc(alias = "xrd_container_set_distance")]
    pub fn set_distance(&self, distance: f32) {
        unsafe {
            ffi::xrd_container_set_distance(self.to_glib_none().0, distance);
        }
    }

    //#[doc(alias = "xrd_container_set_layout")]
    //pub fn set_layout(&self, layout: /*Ignored*/ContainerLayout) {
    //    unsafe { TODO: call ffi:xrd_container_set_layout() }
    //}

    #[doc(alias = "xrd_container_show")]
    pub fn show(&self) {
        unsafe {
            ffi::xrd_container_show(self.to_glib_none().0);
        }
    }

    /// Updates the container's position based on its attachment.
    /// ## `context`
    /// A [`gxr::Context`][crate::gxr::Context]
    ///
    /// # Returns
    ///
    /// A `gboolean` if that is [`true`] the step was successful.
    #[doc(alias = "xrd_container_step")]
    pub fn step(&self, context: &impl IsA<gxr::Context>) -> bool {
        unsafe {
            from_glib(ffi::xrd_container_step(
                self.to_glib_none().0,
                context.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl Default for Container {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for Container {}

impl fmt::Display for Container {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Container")
    }
}
