// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 82da2b8bb0f0+)
// DO NOT EDIT

use crate::Window;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "XrdDesktopCursor")]
    pub struct DesktopCursor(Interface<ffi::XrdDesktopCursor, ffi::XrdDesktopCursorInterface>);

    match fn {
        type_ => || ffi::xrd_desktop_cursor_get_type(),
    }
}

impl DesktopCursor {
    pub const NONE: Option<&'static DesktopCursor> = None;
}

unsafe impl Send for DesktopCursor {}

/// Trait containing all [`struct@DesktopCursor`] methods.
///
/// # Implementors
///
/// [`DesktopCursor`][struct@crate::DesktopCursor]
pub trait DesktopCursorExt: 'static {
    //#[doc(alias = "xrd_desktop_cursor_get_data")]
    //#[doc(alias = "get_data")]
    //fn data(&self) -> /*Ignored*/Option<DesktopCursorData>;

    ///
    /// # Returns
    ///
    /// a [`gulkan::Texture`][crate::gulkan::Texture]
    #[doc(alias = "xrd_desktop_cursor_get_texture")]
    #[doc(alias = "get_texture")]
    fn texture(&self) -> Option<gulkan::Texture>;

    #[doc(alias = "xrd_desktop_cursor_get_transformation")]
    #[doc(alias = "get_transformation")]
    fn transformation(&self, matrix: &mut graphene::Matrix);

    #[doc(alias = "xrd_desktop_cursor_hide")]
    fn hide(&self);

    #[doc(alias = "xrd_desktop_cursor_init_settings")]
    fn init_settings(&self);

    /// Sets and submits a texture.
    /// ## `texture`
    /// A [`gulkan::Texture`][crate::gulkan::Texture] that this [`DesktopCursor`][crate::DesktopCursor] will own.
    #[doc(alias = "xrd_desktop_cursor_set_and_submit_texture")]
    fn set_and_submit_texture(&self, texture: gulkan::Texture);

    /// A hotspot of (x, y) means that the hotspot is at x pixels right, y pixels
    /// down from the top left corner of the texture.
    /// ## `hotspot_x`
    /// The x component of the hotspot.
    /// ## `hotspot_y`
    /// The y component of the hotspot.
    #[doc(alias = "xrd_desktop_cursor_set_hotspot")]
    fn set_hotspot(&self, hotspot_x: i32, hotspot_y: i32);

    #[doc(alias = "xrd_desktop_cursor_set_transformation")]
    fn set_transformation(&self, matrix: &mut graphene::Matrix);

    #[doc(alias = "xrd_desktop_cursor_set_width_meters")]
    fn set_width_meters(&self, meters: f32);

    #[doc(alias = "xrd_desktop_cursor_show")]
    fn show(&self);

    /// Submits current texture.
    #[doc(alias = "xrd_desktop_cursor_submit_texture")]
    fn submit_texture(&self);

    #[doc(alias = "xrd_desktop_cursor_update")]
    fn update(
        &self,
        context: &impl IsA<gxr::Context>,
        window: &impl IsA<Window>,
        intersection: &mut graphene::Point3D,
    );
}

impl<O: IsA<DesktopCursor>> DesktopCursorExt for O {
    //fn data(&self) -> /*Ignored*/Option<DesktopCursorData> {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_get_data() }
    //}

    fn texture(&self) -> Option<gulkan::Texture> {
        unsafe {
            from_glib_none(ffi::xrd_desktop_cursor_get_texture(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn transformation(&self, matrix: &mut graphene::Matrix) {
        unsafe {
            ffi::xrd_desktop_cursor_get_transformation(
                self.as_ref().to_glib_none().0,
                matrix.to_glib_none_mut().0,
            );
        }
    }

    fn hide(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_hide(self.as_ref().to_glib_none().0);
        }
    }

    fn init_settings(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_init_settings(self.as_ref().to_glib_none().0);
        }
    }

    fn set_and_submit_texture(&self, texture: gulkan::Texture) {
        unsafe {
            ffi::xrd_desktop_cursor_set_and_submit_texture(
                self.as_ref().to_glib_none().0,
                texture.into_glib_ptr(),
            );
        }
    }

    fn set_hotspot(&self, hotspot_x: i32, hotspot_y: i32) {
        unsafe {
            ffi::xrd_desktop_cursor_set_hotspot(
                self.as_ref().to_glib_none().0,
                hotspot_x,
                hotspot_y,
            );
        }
    }

    fn set_transformation(&self, matrix: &mut graphene::Matrix) {
        unsafe {
            ffi::xrd_desktop_cursor_set_transformation(
                self.as_ref().to_glib_none().0,
                matrix.to_glib_none_mut().0,
            );
        }
    }

    fn set_width_meters(&self, meters: f32) {
        unsafe {
            ffi::xrd_desktop_cursor_set_width_meters(self.as_ref().to_glib_none().0, meters);
        }
    }

    fn show(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_show(self.as_ref().to_glib_none().0);
        }
    }

    fn submit_texture(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_submit_texture(self.as_ref().to_glib_none().0);
        }
    }

    fn update(
        &self,
        context: &impl IsA<gxr::Context>,
        window: &impl IsA<Window>,
        intersection: &mut graphene::Point3D,
    ) {
        unsafe {
            ffi::xrd_desktop_cursor_update(
                self.as_ref().to_glib_none().0,
                context.as_ref().to_glib_none().0,
                window.as_ref().to_glib_none().0,
                intersection.to_glib_none_mut().0,
            );
        }
    }
}

impl fmt::Display for DesktopCursor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DesktopCursor")
    }
}
