// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../../gir-files (@ eab91ba8f88b)
// from ../../xrd-gir-files (@ 82da2b8bb0f0+)
// DO NOT EDIT

#![cfg(target_os = "linux")]

use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::mem::{align_of, size_of};
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;
use xrd_sys::*;

static PACKAGES: &[&str] = &["xrdesktop-0.15"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG").unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {cmd:?} returned {}", out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!("Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",);
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {abi_cmd:?} failed, {output:?}").into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    (
        "XrdClickEvent",
        Layout {
            size: size_of::<XrdClickEvent>(),
            alignment: align_of::<XrdClickEvent>(),
        },
    ),
    (
        "XrdClient",
        Layout {
            size: size_of::<XrdClient>(),
            alignment: align_of::<XrdClient>(),
        },
    ),
    (
        "XrdClientClass",
        Layout {
            size: size_of::<XrdClientClass>(),
            alignment: align_of::<XrdClientClass>(),
        },
    ),
    (
        "XrdClientMode",
        Layout {
            size: size_of::<XrdClientMode>(),
            alignment: align_of::<XrdClientMode>(),
        },
    ),
    (
        "XrdContainerAttachment",
        Layout {
            size: size_of::<XrdContainerAttachment>(),
            alignment: align_of::<XrdContainerAttachment>(),
        },
    ),
    (
        "XrdContainerClass",
        Layout {
            size: size_of::<XrdContainerClass>(),
            alignment: align_of::<XrdContainerClass>(),
        },
    ),
    (
        "XrdContainerLayout",
        Layout {
            size: size_of::<XrdContainerLayout>(),
            alignment: align_of::<XrdContainerLayout>(),
        },
    ),
    (
        "XrdDesktopCursorData",
        Layout {
            size: size_of::<XrdDesktopCursorData>(),
            alignment: align_of::<XrdDesktopCursorData>(),
        },
    ),
    (
        "XrdDesktopCursorInterface",
        Layout {
            size: size_of::<XrdDesktopCursorInterface>(),
            alignment: align_of::<XrdDesktopCursorInterface>(),
        },
    ),
    (
        "XrdGrabEvent",
        Layout {
            size: size_of::<XrdGrabEvent>(),
            alignment: align_of::<XrdGrabEvent>(),
        },
    ),
    (
        "XrdHoverEvent",
        Layout {
            size: size_of::<XrdHoverEvent>(),
            alignment: align_of::<XrdHoverEvent>(),
        },
    ),
    (
        "XrdHoverMode",
        Layout {
            size: size_of::<XrdHoverMode>(),
            alignment: align_of::<XrdHoverMode>(),
        },
    ),
    (
        "XrdInputSynthButton",
        Layout {
            size: size_of::<XrdInputSynthButton>(),
            alignment: align_of::<XrdInputSynthButton>(),
        },
    ),
    (
        "XrdInputSynthClass",
        Layout {
            size: size_of::<XrdInputSynthClass>(),
            alignment: align_of::<XrdInputSynthClass>(),
        },
    ),
    (
        "XrdMoveCursorEvent",
        Layout {
            size: size_of::<XrdMoveCursorEvent>(),
            alignment: align_of::<XrdMoveCursorEvent>(),
        },
    ),
    (
        "XrdNoHoverEvent",
        Layout {
            size: size_of::<XrdNoHoverEvent>(),
            alignment: align_of::<XrdNoHoverEvent>(),
        },
    ),
    (
        "XrdShakeCompensatorClass",
        Layout {
            size: size_of::<XrdShakeCompensatorClass>(),
            alignment: align_of::<XrdShakeCompensatorClass>(),
        },
    ),
    (
        "XrdTransformTransition",
        Layout {
            size: size_of::<XrdTransformTransition>(),
            alignment: align_of::<XrdTransformTransition>(),
        },
    ),
    (
        "XrdWindowData",
        Layout {
            size: size_of::<XrdWindowData>(),
            alignment: align_of::<XrdWindowData>(),
        },
    ),
    (
        "XrdWindowFlags",
        Layout {
            size: size_of::<XrdWindowFlags>(),
            alignment: align_of::<XrdWindowFlags>(),
        },
    ),
    (
        "XrdWindowInterface",
        Layout {
            size: size_of::<XrdWindowInterface>(),
            alignment: align_of::<XrdWindowInterface>(),
        },
    ),
    (
        "XrdWindowManagerClass",
        Layout {
            size: size_of::<XrdWindowManagerClass>(),
            alignment: align_of::<XrdWindowManagerClass>(),
        },
    ),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) LEFT_BUTTON", "1"),
    ("(gint) MIDDLE_BUTTON", "2"),
    ("(gint) RIGHT_BUTTON", "3"),
    ("(gint) SCROLL_DOWN", "5"),
    ("(gint) SCROLL_LEFT", "6"),
    ("(gint) SCROLL_RIGHT", "7"),
    ("(gint) SCROLL_UP", "4"),
    ("(gint) XRD_CLIENT_MODE_OVERLAY", "0"),
    ("(gint) XRD_CLIENT_MODE_SCENE", "1"),
    ("(gint) XRD_CONTAINER_ATTACHMENT_HAND", "2"),
    ("(gint) XRD_CONTAINER_ATTACHMENT_HEAD", "1"),
    ("(gint) XRD_CONTAINER_ATTACHMENT_NONE", "0"),
    ("(gint) XRD_CONTAINER_HORIZONTAL", "1"),
    ("(gint) XRD_CONTAINER_NO_LAYOUT", "0"),
    ("(gint) XRD_CONTAINER_RELATIVE", "3"),
    ("(gint) XRD_CONTAINER_VERTICAL", "2"),
    ("(gint) XRD_HOVER_MODE_BUTTONS", "1"),
    ("(gint) XRD_HOVER_MODE_EVERYTHING", "0"),
    ("XRD_TIP_APPARENT_SIZE_DISTANCE", "3.000000"),
    ("XRD_TIP_VIEWPORT_SCALE", "3"),
    ("(guint) XRD_WINDOW_BUTTON", "16"),
    ("(guint) XRD_WINDOW_DESTROY_WITH_PARENT", "8"),
    ("(guint) XRD_WINDOW_DRAGGABLE", "2"),
    ("(guint) XRD_WINDOW_HOVERABLE", "1"),
    ("(guint) XRD_WINDOW_MANAGED", "4"),
];
