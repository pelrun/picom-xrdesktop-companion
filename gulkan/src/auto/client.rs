// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 3896faadf111)
// DO NOT EDIT

use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GulkanClient")]
    pub struct Client(Object<ffi::GulkanClient, ffi::GulkanClientClass>);

    match fn {
        type_ => || ffi::gulkan_client_get_type(),
    }
}

impl Client {
    pub const NONE: Option<&'static Client> = None;

    #[doc(alias = "gulkan_client_new")]
    pub fn new() -> Client {
        unsafe { from_glib_full(ffi::gulkan_client_new()) }
    }

    ///
    /// # Returns
    ///
    /// the list of external memory
    /// device extensions
    #[doc(alias = "gulkan_client_get_external_memory_device_extensions")]
    #[doc(alias = "get_external_memory_device_extensions")]
    pub fn external_memory_device_extensions() -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(
                ffi::gulkan_client_get_external_memory_device_extensions(),
            )
        }
    }

    ///
    /// # Returns
    ///
    /// the list of external memory
    /// instance extensions
    #[doc(alias = "gulkan_client_get_external_memory_instance_extensions")]
    #[doc(alias = "get_external_memory_instance_extensions")]
    pub fn external_memory_instance_extensions() -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(
                ffi::gulkan_client_get_external_memory_instance_extensions(),
            )
        }
    }
}

impl Default for Client {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for Client {}
unsafe impl Sync for Client {}

/// Trait containing all [`struct@Client`] methods.
///
/// # Implementors
///
/// [`Client`][struct@crate::Client]
pub trait ClientExt: 'static {
    //#[doc(alias = "gulkan_client_get_device")]
    //#[doc(alias = "get_device")]
    //fn device(&self) -> /*Ignored*/Option<Device>;

    //#[doc(alias = "gulkan_client_get_device_handle")]
    //#[doc(alias = "get_device_handle")]
    //fn device_handle(&self) -> /*Ignored*/Option<vulkan::Device>;

    //#[doc(alias = "gulkan_client_get_instance")]
    //#[doc(alias = "get_instance")]
    //fn instance(&self) -> /*Ignored*/Option<Instance>;

    //#[doc(alias = "gulkan_client_get_instance_handle")]
    //#[doc(alias = "get_instance_handle")]
    //fn instance_handle(&self) -> /*Ignored*/Option<vulkan::Instance>;

    //#[doc(alias = "gulkan_client_get_physical_device_handle")]
    //#[doc(alias = "get_physical_device_handle")]
    //fn physical_device_handle(&self) -> /*Ignored*/Option<vulkan::PhysicalDevice>;
}

impl<O: IsA<Client>> ClientExt for O {
    //fn device(&self) -> /*Ignored*/Option<Device> {
    //    unsafe { TODO: call ffi:gulkan_client_get_device() }
    //}

    //fn device_handle(&self) -> /*Ignored*/Option<vulkan::Device> {
    //    unsafe { TODO: call ffi:gulkan_client_get_device_handle() }
    //}

    //fn instance(&self) -> /*Ignored*/Option<Instance> {
    //    unsafe { TODO: call ffi:gulkan_client_get_instance() }
    //}

    //fn instance_handle(&self) -> /*Ignored*/Option<vulkan::Instance> {
    //    unsafe { TODO: call ffi:gulkan_client_get_instance_handle() }
    //}

    //fn physical_device_handle(&self) -> /*Ignored*/Option<vulkan::PhysicalDevice> {
    //    unsafe { TODO: call ffi:gulkan_client_get_physical_device_handle() }
    //}
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Client")
    }
}
