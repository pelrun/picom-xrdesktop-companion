// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 3896faadf111)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GulkanTexture")]
    pub struct Texture(Object<ffi::GulkanTexture, ffi::GulkanTextureClass>);

    match fn {
        type_ => || ffi::gulkan_texture_get_type(),
    }
}

impl Texture {
    //#[doc(alias = "gulkan_texture_new")]
    //pub fn new(client: &impl IsA<Client>, extent: /*Ignored*/&vulkan::Extent2D, format: /*Ignored*/&vulkan::Format) -> Texture {
    //    unsafe { TODO: call ffi:gulkan_texture_new() }
    //}

    //#[doc(alias = "gulkan_texture_new_export_fd")]
    //pub fn new_export_fd(client: &impl IsA<Client>, extent: /*Ignored*/&vulkan::Extent2D, format: /*Ignored*/&vulkan::Format, layout: /*Ignored*/&vulkan::ImageLayout) -> (Texture, usize, i32) {
    //    unsafe { TODO: call ffi:gulkan_texture_new_export_fd() }
    //}

    //#[doc(alias = "gulkan_texture_new_from_cairo_surface")]
    //#[doc(alias = "new_from_cairo_surface")]
    //pub fn from_cairo_surface(client: &impl IsA<Client>, surface: /*Ignored*/&mut cairo::Surface, format: /*Ignored*/&vulkan::Format, layout: /*Ignored*/&vulkan::ImageLayout) -> Texture {
    //    unsafe { TODO: call ffi:gulkan_texture_new_from_cairo_surface() }
    //}

    //#[doc(alias = "gulkan_texture_new_from_dmabuf")]
    //#[doc(alias = "new_from_dmabuf")]
    //pub fn from_dmabuf(client: &impl IsA<Client>, fd: i32, extent: /*Ignored*/&vulkan::Extent2D, format: /*Ignored*/&vulkan::Format) -> Texture {
    //    unsafe { TODO: call ffi:gulkan_texture_new_from_dmabuf() }
    //}

    //#[doc(alias = "gulkan_texture_new_from_pixbuf")]
    //#[doc(alias = "new_from_pixbuf")]
    //pub fn from_pixbuf(client: &impl IsA<Client>, pixbuf: /*Ignored*/&gdk_pixbuf::Pixbuf, format: /*Ignored*/&vulkan::Format, layout: /*Ignored*/&vulkan::ImageLayout, create_mipmaps: bool) -> Texture {
    //    unsafe { TODO: call ffi:gulkan_texture_new_from_pixbuf() }
    //}

    //#[doc(alias = "gulkan_texture_new_mip_levels")]
    //pub fn new_mip_levels(client: &impl IsA<Client>, extent: /*Ignored*/&vulkan::Extent2D, mip_levels: u32, format: /*Ignored*/&vulkan::Format) -> Texture {
    //    unsafe { TODO: call ffi:gulkan_texture_new_mip_levels() }
    //}

    //#[doc(alias = "gulkan_texture_get_extent")]
    //#[doc(alias = "get_extent")]
    //pub fn extent(&self) -> /*Ignored*/Option<vulkan::Extent2D> {
    //    unsafe { TODO: call ffi:gulkan_texture_get_extent() }
    //}

    //#[doc(alias = "gulkan_texture_get_format")]
    //#[doc(alias = "get_format")]
    //pub fn format(&self) -> /*Ignored*/Option<vulkan::Format> {
    //    unsafe { TODO: call ffi:gulkan_texture_get_format() }
    //}

    //#[doc(alias = "gulkan_texture_get_image")]
    //#[doc(alias = "get_image")]
    //pub fn image(&self) -> /*Ignored*/Option<vulkan::Image> {
    //    unsafe { TODO: call ffi:gulkan_texture_get_image() }
    //}

    //#[doc(alias = "gulkan_texture_get_image_view")]
    //#[doc(alias = "get_image_view")]
    //pub fn image_view(&self) -> /*Ignored*/Option<vulkan::ImageView> {
    //    unsafe { TODO: call ffi:gulkan_texture_get_image_view() }
    //}

    #[doc(alias = "gulkan_texture_get_mip_levels")]
    #[doc(alias = "get_mip_levels")]
    pub fn mip_levels(&self) -> u32 {
        unsafe { ffi::gulkan_texture_get_mip_levels(self.to_glib_none().0) }
    }

    //#[doc(alias = "gulkan_texture_record_transfer")]
    //pub fn record_transfer(&self, cmd_buffer: /*Ignored*/&vulkan::CommandBuffer, src_layout: /*Ignored*/&vulkan::ImageLayout, dst_layout: /*Ignored*/&vulkan::ImageLayout) {
    //    unsafe { TODO: call ffi:gulkan_texture_record_transfer() }
    //}

    //#[doc(alias = "gulkan_texture_record_transfer_full")]
    //pub fn record_transfer_full(&self, cmd_buffer: /*Ignored*/&vulkan::CommandBuffer, src_access_mask: /*Ignored*/&vulkan::AccessFlags, dst_access_mask: /*Ignored*/&vulkan::AccessFlags, src_layout: /*Ignored*/&vulkan::ImageLayout, dst_layout: /*Ignored*/&vulkan::ImageLayout, src_stage_mask: /*Ignored*/&vulkan::PipelineStageFlags, dst_stage_mask: /*Ignored*/&vulkan::PipelineStageFlags) {
    //    unsafe { TODO: call ffi:gulkan_texture_record_transfer_full() }
    //}

    //#[doc(alias = "gulkan_texture_transfer_layout")]
    //pub fn transfer_layout(&self, src_layout: /*Ignored*/&vulkan::ImageLayout, dst_layout: /*Ignored*/&vulkan::ImageLayout) -> bool {
    //    unsafe { TODO: call ffi:gulkan_texture_transfer_layout() }
    //}

    //#[doc(alias = "gulkan_texture_transfer_layout_full")]
    //pub fn transfer_layout_full(&self, src_access_mask: /*Ignored*/&vulkan::AccessFlags, dst_access_mask: /*Ignored*/&vulkan::AccessFlags, src_layout: /*Ignored*/&vulkan::ImageLayout, dst_layout: /*Ignored*/&vulkan::ImageLayout, src_stage_mask: /*Ignored*/&vulkan::PipelineStageFlags, dst_stage_mask: /*Ignored*/&vulkan::PipelineStageFlags) -> bool {
    //    unsafe { TODO: call ffi:gulkan_texture_transfer_layout_full() }
    //}

    //#[doc(alias = "gulkan_texture_upload_cairo_surface")]
    //pub fn upload_cairo_surface(&self, surface: /*Ignored*/&mut cairo::Surface, layout: /*Ignored*/&vulkan::ImageLayout) -> bool {
    //    unsafe { TODO: call ffi:gulkan_texture_upload_cairo_surface() }
    //}

    //#[doc(alias = "gulkan_texture_upload_pixbuf")]
    //pub fn upload_pixbuf(&self, pixbuf: /*Ignored*/&gdk_pixbuf::Pixbuf, layout: /*Ignored*/&vulkan::ImageLayout) -> bool {
    //    unsafe { TODO: call ffi:gulkan_texture_upload_pixbuf() }
    //}

    //#[doc(alias = "gulkan_texture_upload_pixels")]
    //pub fn upload_pixels(&self, pixels: u8, size: usize, layout: /*Ignored*/&vulkan::ImageLayout) -> bool {
    //    unsafe { TODO: call ffi:gulkan_texture_upload_pixels() }
    //}
}

unsafe impl Send for Texture {}
unsafe impl Sync for Texture {}

impl fmt::Display for Texture {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Texture")
    }
}
